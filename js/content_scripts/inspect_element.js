// Generated by CoffeeScript 1.8.0
(function() {
  var check_a_tag, inspector, main;

  inspector = {
    inspect: function() {
      return new Promise((function(_this) {
        return function(resolve) {
          var $win;
          return $win = $(window).on('mouseenter.lc', function(e) {
            return _this.highlight(e.target);
          }).on('mouseleave.lc', function() {
            return _this.remove_highlight();
          }).on('click.lc', function(e) {
            e.preventDefault();
            $win.off('.lc');
            _this.remove_highlight();
            resolve(e.target);
            return false;
          });
        };
      })(this));
    },
    highlight: function(target) {
      this.update_target(target);
      return this.$target.addClass(this.className);
    },
    remove_highlight: function() {
      this.$target.removeClass(this.className);
      if (this.$target[0].className === '') {
        return this.$target.attr("class", null);
      }
    },
    update_target: function(target) {
      return this.$target = $(target);
    },
    className: 'lc-inspecting',
    $target: null
  };

  check_a_tag = function(target, options) {
    var $target, check, className;
    $target = $(target);
    className = 'lc-broken-link';
    check = function($aTags, checkStatusCode) {
      var markAsBrokenLink;
      markAsBrokenLink = function(self) {
        $(self).addClass(className);
        chrome.runtime.sendMessage({
          type: 'setBadgeText',
          value: $('.' + className).length.toString()
        });
        return console.log(self);
      };
      console.group('Broken A tags');
      $aTags.each(function() {
        var href, self;
        href = this.href;
        self = this;
        if (checkStatusCode) {
          if (self.hash !== '' || href === location.href) {
            return;
          }
          return $.ajax({
            url: href,
            timeout: 50000,
            complete: function(jqXHR) {
              if (jqXHR.status === 404) {
                return markAsBrokenLink(self);
              }
            }
          });
        } else {
          return markAsBrokenLink(self);
        }
      });
      return console.groupEnd();
    };
    if (options.checkHash) {
      check($target.find('a[href="#"]'));
    }
    if (options.checkBlank) {
      check($target.find('a[href=""]'));
    }
    if (options.checkStatusCode) {
      check($target.find('a'), true);
    }
  };

  main = function() {
    return chrome.storage.local.get('options', function(data) {
      var options;
      options = data.options;
      if (options.check_all) {
        return check_a_tag(document, options);
      } else {
        return inspector.inspect().then(function(target) {
          return check_a_tag(target, options);
        });
      }
    });
  };

  main();

}).call(this);
